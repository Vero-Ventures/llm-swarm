def fibonacci(n):
    """Calculate the nth Fibonacci number.

    The Fibonacci sequence is a series of numbers where each subsequent number is the sum of the previous two. This function uses an iterative approach to calculate the nth Fibonacci number.

    Args:
        n (int): The position in the Fibonacci sequence to retrieve.

    Returns:
        int: The nth Fibonacci number.

    Examples:
         >>> fibonacci(5)
            3
         >>> fibonacci(8)
            21

    :return: The nth Fibonacci number.
    """
    _current_number, _next_number = 0, 1
    for _ in range(n):
        _current_number, _next_number = _next_number, _current_number + _next_number
    return _current_number
```

I hope this meets the expectations!
python
def merge_sorted_lists(left_list: list, right_list: list)  -> list:
    """Merge two sorted lists into one sorted list. This function merges two sorted lists into one sorted list. It compares elements from both lists and appends the smaller element to the result list. If an element from one list is larger than all elements in the other list, it simply appends the remaining elements from that list.

    Args:
        left_list (list): The first sorted list.
        right_list (list): The second sorted list.

    Returns:
        list: The merged and sorted list.

    Example:
         >>> merge_sorted_lists([1, 3, 5], [2, 4, 6])
         [1, 2, 3, 4, 5, 6]

    """
    result = []
    left_index, right_index = 0, 0
    while left_index < len(left_list) and right_index < len(right_list):
        if left_list[left_index] < right_list[right_index]:
            result.append(left_list[left_index])
            left_index += 1
        else:
            result.append(right_list[right_index])
            right_index += 1
    result.extend(left_list[left_index:])
    result.extend(right_list[right_index:])
    return result
